(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'pinglun.jietu.94d18e07d189cfca.32303132303132353039343534343034362e6a7067.jpg'"
p3
sS'layer'
p4
S'e:\\documents\\nwoi\\web2py\\applications\\nwoi\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# ########################################################################\n# # This is a sample controller\n# # - index is the default action of any application\n# # - user is required for authentication and authorization\n# # - download is for downloading files uploaded in the db (does streaming)\n# # - api is an example of Hypermedia API support and access control\n#########################################################################\nfrom gluon.tools import Crud\n\ncrud = Crud(db)\ncrud.settings.download_url = URL(\'download\')\ncrud.settings.update_deletable = True\ncrud.settings.keepvalues = True\n\n\ndef congfutimu(form):\n    if db.timu((db.timu.oj == form.vars.oj) & (db.timu.bianhao == form.vars.bianhao)):\n        form.errors = True\n        response.flash = \'\xe9\xa2\x98\xe7\x9b\xae\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\'\n\n\ncrud.settings.create_onvalidation.timu.append(congfutimu)\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    if auth.user:\n        jisuanjifen()\n        print auth.user\n    rows = db(db.auth_user.yingcang==False).select(db.auth_user.first_name, db.auth_user.jifen, orderby=~db.auth_user.jifen)\n    left = SQLTABLE(rows, headers={\'auth_user.first_name\': \'\xe5\xa7\x93\xe5\x90\x8d\', \'auth_user.jifen\': \'\xe7\xa7\xaf\xe5\x88\x86\'})\n    firstzuoye = db().select(db.zuoye.id).first().id\n    title=db.zuoye[firstzuoye].title\n    qtid = db.zuoye[firstzuoye].qingtong\n    byid = db.zuoye[firstzuoye].baiying\n    hjid = db.zuoye[firstzuoye].huangjing\n    qttm = db.timu[qtid]\n    bytm = db.timu[byid]\n    hjtm = db.timu[hjid]\n    a1 = A(\'\xe9\x9d\x92\xe9\x93\x9c\xef\xbc\x9a\' + qttm.biaoti + \'\xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0:\' + str(qttm.tongguo), _href=URL(\'viewtimu\', args=[qtid]))\n    a2 = A(\'\xe7\x99\xbd\xe9\x93\xb6\xef\xbc\x9a\' + bytm.biaoti + \'\xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0:\' + str(qttm.tongguo), _href=URL(\'viewtimu\', args=[byid]))\n    a3 = A(\'\xe9\xbb\x84\xe9\x87\x91\xef\xbc\x9a\' + hjtm.biaoti + \'\xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0:\' + str(qttm.tongguo), _href=URL(\'viewtimu\', args=[hjid]))\n\n    return dict(left=left, title=title,a1=a1, a2=a2, a3=a3)\n\n\n@auth.requires_login()\ndef createtimu():\n    db.timu.zuozhe.default = auth.user.id\n    return dict(form=crud.create(db.timu, next=URL(\'timus\'), message=\'add sucessed\'))\n\n\n@auth.requires_login()\ndef edittimu():\n    return dict(form=crud.update(db.timu, request.args[0]))\n\n\n@auth.requires_login()\ndef tijiao():\n    timu = request.args[0]\n    if db.tijiao((db.tijiao.timu == timu) & (db.tijiao.zuozhe == auth.user.id)):\n        return dict(form=\'\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x8f\x90\xe4\xba\xa4\xe8\xaf\xa5\xe9\xa2\x98\')\n    db.tijiao.timu.default = timu\n    db.tijiao.zuozhe.default = auth.user.id\n    form = crud.create(db.tijiao, next=URL(\'timus\'), message=\'\xe5\xb7\xb2\xe6\x8f\x90\xe4\xba\xa4\')\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef createjietibaogao():\n    timu = request.args[0]\n    if db.jietibaogao((db.jietibaogao.timu == timu) & (db.jietibaogao.zuozhe == auth.user.id)):\n        return dict(form=\'\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x8f\x90\xe4\xba\xa4\xe8\xaf\xa5\xe9\xa2\x98\xe8\xa7\xa3\xe9\xa2\x98\xe6\x8a\xa5\xe5\x91\x8a\')\n    db.jietibaogao.timu.default = timu\n    db.jietibaogao.zuozhe.default = auth.user.id\n    form = crud.create(db.jietibaogao, next=URL(\'jietibaogaos\', args=[timu]), message=\'\xe5\xb7\xb2\xe6\x8f\x90\xe4\xba\xa4\')\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef tijiaos():\n    grid = SQLFORM.grid(\n        db.tijiao,\n        fields=[db.tijiao.timu, db.tijiao.zuozhe, db.tijiao.shijian, db.tijiao.yuyan, db.tijiao.tongguo],\n        orderby=~db.tijiao.id,\n        create=False,\n        deletable=False,\n        details=False,\n        editable=False,\n        csv=False,\n        links=[dict(header=\'\xe6\x9f\xa5\xe7\x9c\x8b\', body=lambda row: A(\'\xe6\x9f\xa5\xe7\x9c\x8b\', _href=URL(\'viewtijiao\', args=[row.id])))])\n    return locals()\n\n\n@auth.requires_login()\ndef zuoyes():\n    grid = SQLFORM.grid(\n        db.zuoye,\n        orderby=~db.zuoye.id,\n        create=False,\n        deletable=False,\n        editable=False,\n        details=False,\n        csv=False,\n        links_in_grid=True,\n        links=[dict(header=\'\xe6\x9f\xa5\xe7\x9c\x8b\', body=lambda row: A(\'\xe6\x9f\xa5\xe7\x9c\x8b\', _href=URL(\'viewzuoye\', args=[row.id])))]\n    )\n    return locals()\n\n\n@auth.requires_login()\ndef viewtimu():\n    timuid = request.args[0]\n    if db.tijiao((db.tijiao.timu == timuid) & (auth.user.id == db.tijiao.zuozhe)):\n        tjid = db.tijiao(db.tijiao.timu == timuid).id\n        tijiaourl = A(\'\xe5\xb7\xb2\xe6\x8f\x90\xe4\xba\xa4\', _href=URL(\'viewtijiao\', args=[tjid]))\n    else:\n        tijiaourl = A(\'\xe6\x8f\x90\xe4\xba\xa4\', _href=URL(\'tijiao\', args=[timuid]))\n    jietibaogaourl=A(\'\xe8\xa7\xa3\xe9\xa2\x98\xe6\x8a\xa5\xe5\x91\x8a\',_href=URL(\'jietibaogaos\',args=[timuid]))\n    pingluns=db(db.pinglun.timu==timuid).select()\n\n    db.pinglun.timu.default=timuid\n    db.pinglun.zuozhe.default=auth.user.id\n    addpinglun=crud.create(db.pinglun)\n    return dict(form=crud.read(db.timu, timuid),\n                tijiaourl=tijiaourl,jietibaogaourl=jietibaogaourl,\n                pingluns=pingluns,addpinglun=addpinglun)\n\n\n@auth.requires_login()\ndef viewtijiao():\n    tjid = request.args[0]\n    if db.tijiao[tjid].zuozhe == auth.user.id:\n        return dict(form=crud.read(db.tijiao, tjid))\n    return \'\xe5\x8f\xaa\xe8\x83\xbd\xe6\x9f\xa5\xe7\x9c\x8b\xe6\x9c\xac\xe4\xba\xba\xe6\x8f\x90\xe4\xba\xa4\'\n\n\n@auth.requires_login()\ndef viewjietibaogao():\n    jtbgid = request.args[0]\n    return dict(form=crud.read(db.jietibaogao, jtbgid))\n\n\n@auth.requires_login()\ndef viewzuoye():\n    zuoyeid = request.args[0]\n    title=db.zuoye[zuoyeid].title\n    qtid = db.zuoye[zuoyeid].qingtong\n    byid = db.zuoye[zuoyeid].baiying\n    hjid = db.zuoye[zuoyeid].huangjing\n    qttm = db.timu[qtid]\n    bytm = db.timu[byid]\n    hjtm = db.timu[hjid]\n    a1 = A(\'\xe9\x9d\x92\xe9\x93\x9c\xef\xbc\x9a\' + qttm.biaoti + \'------\xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0:\' + str(qttm.tongguo), _href=URL(\'viewtimu\', args=[qtid]))\n    a2 = A(\'\xe7\x99\xbd\xe9\x93\xb6\xef\xbc\x9a\' + bytm.biaoti + \'------\xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0:\' + str(qttm.tongguo), _href=URL(\'viewtimu\', args=[byid]))\n    a3 = A(\'\xe9\xbb\x84\xe9\x87\x91\xef\xbc\x9a\' + hjtm.biaoti + \'------\xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0:\' + str(qttm.tongguo), _href=URL(\'viewtimu\', args=[hjid]))\n\n    return dict(title=title,a1=a1, a2=a2, a3=a3)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef managetijiaos():\n    db.tijiao.tongguo.writable = True\n    grid = SQLFORM.grid(\n        db.tijiao,\n        editable=True,\n        details=True,\n        selectable=None,\n        create=True\n    )\n    return dict(form=grid)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef managezuoyes():\n    grid = SQLFORM.grid(db.zuoye, orderby=~db.zuoye.id)\n    return dict(form=grid)\n\n\n@auth.requires_login()\ndef timus():\n    add = A(\'\xe6\x96\xb0\xe5\xbb\xba\', _href=URL(\'createtimu\'))\n    grid = SQLFORM.grid(\n        db.timu,\n        fields=[db.timu.biaoti, db.timu.zuozhe, db.timu.shijian, db.timu.oj, db.timu.bianhao, db.timu.jifen,\n                db.timu.tongguo],\n        orderby=~db.timu.id,\n        create=False,\n        deletable=False,\n        editable=False,\n        csv=False,\n        links_in_grid=True,\n        details=False,\n        links=[dict(header=\'\xe6\x8f\x90\xe4\xba\xa4\', body=lambda row: A(\'\xe6\x8f\x90\xe4\xba\xa4\', _href=URL(\'tijiao\', args=[row.id]))),\n               dict(header=\'\xe6\x9f\xa5\xe7\x9c\x8b\', body=lambda row: A(\'\xe6\x9f\xa5\xe7\x9c\x8b\', _href=URL(\'viewtimu\', args=[row.id]))),\n               dict(header=\'\xe8\xa7\xa3\xe9\xa2\x98\xe6\x8a\xa5\xe5\x91\x8a\', body=lambda row: A(\'\xe6\x8a\xa5\xe5\x91\x8a\', _href=URL(\'jietibaogaos\', args=[row.id])))])\n    return locals()\n\n\n@auth.requires_login()\ndef jietibaogaos():\n    timuid = request.args(0)\n    add = A(\'\xe6\x96\xb0\xe5\xbb\xba\', _href=URL(\'createjietibaogao\', args=[timuid]))\n    if timuid:\n        rows = db(db.jietibaogao.timu == timuid).select(db.jietibaogao.id,\n                                                        db.jietibaogao.zuozhe,\n                                                        db.jietibaogao.shijian,\n                                                        db.jietibaogao.jifen,\n                                                        orderby=~db.jietibaogao.jifen\n        )\n\n    else:\n        rows = db().select(db.jietibaogao.id,\n                           db.jietibaogao.timu,\n                           db.jietibaogao.zuozhe,\n                           db.jietibaogao.shijian,\n                           db.jietibaogao.jifen,\n                           orderby=~db.jietibaogao.jifen)\n    form = SQLTABLE(rows,\n                    headers={\'jietibaogao.id\': \'id\',\n                             \'jietibaogao.timu\': \'\xe9\xa2\x98\xe7\x9b\xae\',\n                             \'jietibaogao.zuozhe\': \'\xe4\xbd\x9c\xe8\x80\x85\',\n                             \'jietibaogao.shijian\': \'\xe6\x97\xb6\xe9\x97\xb4\',\n                             \'jietibaogao.jifen\': \'\xe7\xa7\xaf\xe5\x88\x86\',\n                    },\n                    extracolumns=[{\'label\': A(\'\xe6\x9f\xa5\xe7\x9c\x8b\', _href=\'#\'),\n                                   \'class\': \'\',  #class name of the header\n                                   \'width\': \'\',  #width in pixels or %\n                                   \'content\': lambda row, rc: A(\'\xe6\x9f\xa5\xe7\x9c\x8b\', _href=URL(\'viewjietibaogao\', args=[row.id])),\n                                   \'selected\': False}])\n    return dict(add=add,form=form)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef managejietibaogaos():\n    db.jietibaogao.jifen.writable = True\n    grid = SQLFORM.grid(db.jietibaogao, orderby=~db.jietibaogao.id)\n    return dict(form=grid)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef managetimus():\n    db.timu.jifen.writable = True\n    grid = SQLFORM.grid(\n        db.timu,\n        editable=True,\n        details=True,\n        selectable=None,\n        create=True\n    )\n    return dict(form=grid)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef tongguotimu():\n    row = db(db.timu.jifen == 0).select().first()\n    if row:\n        db.timu.jifen.writable = True\n        form = SQLFORM(db.timu, row.id, upload=URL(\'download\'))\n        if form.process().accepted:\n            response.flash = \'finished\'\n            redirect(request.url)\n    else:\n        return dict(form=\'\xe5\x85\xa8\xe9\x83\xa8\xe5\xb7\xb2\xe5\xae\x8c\xe6\x88\x90\')\n    return dict(form=form)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef tongguotijiao():\n    image = \'\'\n    row = db(db.tijiao.tongguo == False).select().first()\n    if row:\n        image = db.timu[row.timu].jietu\n        db.tijiao.tongguo.writable = True\n        form = SQLFORM(db.tijiao, row.id, upload=URL(\'download\'))\n        if form.process().accepted:\n            response.flash = \'finished\'\n            redirect(request.url)\n    else:\n        return dict(form=\'\xe5\x85\xa8\xe9\x83\xa8\xe5\xb7\xb2\xe5\xae\x8c\xe6\x88\x90\', image=image)\n    return dict(form=form, image=image)\n\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\ndef tongguojietibaogao():\n    image = \'\'\n    row = db(db.jietibaogao.jifen == 0).select().first()\n    if row:\n        image = db.timu[row.timu].jietu\n        db.jietibaogao.jifen.writable = True\n        form = SQLFORM(db.jietibaogao, row.id, upload=URL(\'download\'))\n        if form.process().accepted:\n            response.flash = \'finished\'\n            redirect(request.url)\n    else:\n        return dict(form=\'\xe5\x85\xa8\xe9\x83\xa8\xe5\xb7\xb2\xe5\xae\x8c\xe6\x88\x90\', image=image)\n    return dict(form=form, image=image)\n\n@auth.requires(auth.has_membership(role=\'teacher\'), requires_login=True)\n\ndef jiajianfen():\n    form=SQLFORM.grid(db.jiajianfen,orderby=~db.jiajianfen.id)\n    return dict(form=form)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login()\ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n\n    rules = {\n        \'<tablename>\': {\'GET\': {}, \'POST\': {}, \'PUT\': {}, \'DELETE\': {}},\n    }\n    return Collection(db).process(request, response, rules)\n\n\ndef jisuanjifen():\n    userid=auth.user.id\n    sumjjf=db.jiajianfen.fenzhi.sum()\n    sumjtbg=db.jietibaogao.jifen.sum()\n    sumtj=db.timu.jifen.sum()\n    userjiajianfen=db(db.jiajianfen.zuozhe==userid).select(sumjjf).first()[sumjjf]\n    usertijiaos=db((db.tijiao.timu==db.timu.id) & (db.tijiao.zuozhe==userid)).select(sumtj,left=db.tijiao).first()[sumtj]\n    userjietibaogaos=db(db.jietibaogao.zuozhe==userid).select(sumjtbg).first()[sumjtbg]\n    jifen=userjiajianfen+usertijiaos+userjietibaogaos\n    db.auth_user[userid]=dict(jifen=jifen)\n    return jifen\n\n\n@auth.requires_login()\ndef myjiajianfen():\n    jiajianfen=db(db.jiajianfen.zuozhe==auth.user.id).select(orderby=~db.jiajianfen.id)\n    return dict(form=SQLTABLE(jiajianfen,\n                              headers={\'jiajianfen.id\':\'id\',\n                                       \'jiajianfen.zuozhe\':\'\xe7\x94\xa8\xe6\x88\xb7\',\n                                       \'jiajianfen.fenzhi\':\'\xe5\x88\x86\xe5\x80\xbc\',\n                                       \'jiajianfen.shijian\':\'\xe6\x97\xb6\xe9\x97\xb4\',\n                                       \'jiajianfen.beizhu\':\'\xe5\x8e\x9f\xe5\x9b\xa0\'}))\nresponse._vars=response._caller(viewtimu)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "E:\\documents\\nwoi\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "e:\\documents\\nwoi\\web2py\\applications\\nwoi\\controllers/default.py", line 387, in <module>\n  File "E:\\documents\\nwoi\\web2py\\gluon\\globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "E:\\documents\\nwoi\\web2py\\gluon\\tools.py", line 3439, in f\n    return action(*a, **b)\n  File "e:\\documents\\nwoi\\web2py\\applications\\nwoi\\controllers/default.py", line 123, in viewtimu\n    if db.tijiao((db.tijiao.timu == timuid) & (auth.user.id == db.tijiao.zuozhe)):\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 9124, in __call__\n    limitby=(0, 1), for_update=for_update, orderby=orderby, orderby_on_limitby=False).first()\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 10749, in select\n    return adapter.select(self.query, fields, attributes)\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 2472, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1868, in select\n    sql = self._select(query, fields, attributes)\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1767, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1382, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1440, in EQ\n    self.expand(second, first.type))\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 1555, in expand\n    return str(self.represent(expression, field_type))\n  File "E:\\documents\\nwoi\\web2py\\gluon\\dal.py", line 2012, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'pinglun.jietu.94d18e07d189cfca.32303132303132353039343534343034362e6a7067.jpg\'\n'
p11
s.